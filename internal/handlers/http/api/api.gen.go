// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Name     string `json:"name"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// Tweet defines model for Tweet.
type Tweet struct {
	CreatedAt time.Time `json:"createdAt"`
	Id        int       `json:"id"`
	Text      string    `json:"text"`
}

// TweetCreate defines model for TweetCreate.
type TweetCreate struct {
	Text string `json:"text"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	AccessToken *string `json:"accessToken,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Error string `json:"error"`
}

// InternalError defines model for InternalError.
type InternalError struct {
	Error string `json:"error"`
}

// Unauthorized defines model for Unauthorized.
type Unauthorized struct {
	Error string `json:"error"`
}

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginRequest

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = RegisterRequest

// CreateTweetJSONRequestBody defines body for CreateTweet for application/json ContentType.
type CreateTweetJSONRequestBody = TweetCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Вход в систему
	// (POST /api/1/auth/login)
	LoginUser(w http.ResponseWriter, r *http.Request)
	// Регистрация нового пользователя
	// (POST /api/1/auth/register)
	RegisterUser(w http.ResponseWriter, r *http.Request)
	// Создать новый пост
	// (POST /api/1/tweets/create_post)
	CreateTweet(w http.ResponseWriter, r *http.Request)
	// Получить ленту постов
	// (GET /api/1/tweets/feed)
	GetFeed(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Вход в систему
// (POST /api/1/auth/login)
func (_ Unimplemented) LoginUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Регистрация нового пользователя
// (POST /api/1/auth/register)
func (_ Unimplemented) RegisterUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Создать новый пост
// (POST /api/1/tweets/create_post)
func (_ Unimplemented) CreateTweet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить ленту постов
// (GET /api/1/tweets/feed)
func (_ Unimplemented) GetFeed(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTweet operation middleware
func (siw *ServerInterfaceWrapper) CreateTweet(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTweet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFeed operation middleware
func (siw *ServerInterfaceWrapper) GetFeed(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeed(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/1/auth/login", wrapper.LoginUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/1/auth/register", wrapper.RegisterUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/1/tweets/create_post", wrapper.CreateTweet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/1/tweets/feed", wrapper.GetFeed)
	})

	return r
}

type AuthResponseJSONResponse struct {
	AccessToken *string `json:"accessToken,omitempty"`
}

type BadRequestJSONResponse struct {
	Error string `json:"error"`
}

type InternalErrorJSONResponse struct {
	Error string `json:"error"`
}

type UnauthorizedJSONResponse struct {
	Error string `json:"error"`
}

type LoginUserRequestObject struct {
	Body *LoginUserJSONRequestBody
}

type LoginUserResponseObject interface {
	VisitLoginUserResponse(w http.ResponseWriter) error
}

type LoginUser200JSONResponse struct{ AuthResponseJSONResponse }

func (response LoginUser200JSONResponse) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginUser401Response struct {
}

func (response LoginUser401Response) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type RegisterUserRequestObject struct {
	Body *RegisterUserJSONRequestBody
}

type RegisterUserResponseObject interface {
	VisitRegisterUserResponse(w http.ResponseWriter) error
}

type RegisterUser201JSONResponse struct{ AuthResponseJSONResponse }

func (response RegisterUser201JSONResponse) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type RegisterUser409Response struct {
}

func (response RegisterUser409Response) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type CreateTweetRequestObject struct {
	Body *CreateTweetJSONRequestBody
}

type CreateTweetResponseObject interface {
	VisitCreateTweetResponse(w http.ResponseWriter) error
}

type CreateTweet201JSONResponse Tweet

func (response CreateTweet201JSONResponse) VisitCreateTweetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTweet400JSONResponse struct{ BadRequestJSONResponse }

func (response CreateTweet400JSONResponse) VisitCreateTweetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateTweet401JSONResponse struct{ UnauthorizedJSONResponse }

func (response CreateTweet401JSONResponse) VisitCreateTweetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateTweet500JSONResponse struct{ InternalErrorJSONResponse }

func (response CreateTweet500JSONResponse) VisitCreateTweetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetFeedRequestObject struct {
}

type GetFeedResponseObject interface {
	VisitGetFeedResponse(w http.ResponseWriter) error
}

type GetFeed200JSONResponse []Tweet

func (response GetFeed200JSONResponse) VisitGetFeedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFeed500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetFeed500JSONResponse) VisitGetFeedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Вход в систему
	// (POST /api/1/auth/login)
	LoginUser(ctx context.Context, request LoginUserRequestObject) (LoginUserResponseObject, error)
	// Регистрация нового пользователя
	// (POST /api/1/auth/register)
	RegisterUser(ctx context.Context, request RegisterUserRequestObject) (RegisterUserResponseObject, error)
	// Создать новый пост
	// (POST /api/1/tweets/create_post)
	CreateTweet(ctx context.Context, request CreateTweetRequestObject) (CreateTweetResponseObject, error)
	// Получить ленту постов
	// (GET /api/1/tweets/feed)
	GetFeed(ctx context.Context, request GetFeedRequestObject) (GetFeedResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// LoginUser operation middleware
func (sh *strictHandler) LoginUser(w http.ResponseWriter, r *http.Request) {
	var request LoginUserRequestObject

	var body LoginUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoginUser(ctx, request.(LoginUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginUserResponseObject); ok {
		if err := validResponse.VisitLoginUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterUser operation middleware
func (sh *strictHandler) RegisterUser(w http.ResponseWriter, r *http.Request) {
	var request RegisterUserRequestObject

	var body RegisterUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterUser(ctx, request.(RegisterUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RegisterUserResponseObject); ok {
		if err := validResponse.VisitRegisterUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTweet operation middleware
func (sh *strictHandler) CreateTweet(w http.ResponseWriter, r *http.Request) {
	var request CreateTweetRequestObject

	var body CreateTweetJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTweet(ctx, request.(CreateTweetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTweet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateTweetResponseObject); ok {
		if err := validResponse.VisitCreateTweetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFeed operation middleware
func (sh *strictHandler) GetFeed(w http.ResponseWriter, r *http.Request) {
	var request GetFeedRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFeed(ctx, request.(GetFeedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFeed")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFeedResponseObject); ok {
		if err := validResponse.VisitGetFeedResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
