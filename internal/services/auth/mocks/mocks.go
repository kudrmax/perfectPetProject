// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source service.go -destination mocks/mocks.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/kudrmax/perfectPetProject/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockuserService is a mock of userService interface.
type MockuserService struct {
	ctrl     *gomock.Controller
	recorder *MockuserServiceMockRecorder
	isgomock struct{}
}

// MockuserServiceMockRecorder is the mock recorder for MockuserService.
type MockuserServiceMockRecorder struct {
	mock *MockuserService
}

// NewMockuserService creates a new mock instance.
func NewMockuserService(ctrl *gomock.Controller) *MockuserService {
	mock := &MockuserService{ctrl: ctrl}
	mock.recorder = &MockuserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserService) EXPECT() *MockuserServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockuserService) Create(user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockuserServiceMockRecorder) Create(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockuserService)(nil).Create), user)
}

// GetByUsername mocks base method.
func (m *MockuserService) GetByUsername(username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockuserServiceMockRecorder) GetByUsername(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockuserService)(nil).GetByUsername), username)
}

// MockpasswordHasherService is a mock of passwordHasherService interface.
type MockpasswordHasherService struct {
	ctrl     *gomock.Controller
	recorder *MockpasswordHasherServiceMockRecorder
	isgomock struct{}
}

// MockpasswordHasherServiceMockRecorder is the mock recorder for MockpasswordHasherService.
type MockpasswordHasherServiceMockRecorder struct {
	mock *MockpasswordHasherService
}

// NewMockpasswordHasherService creates a new mock instance.
func NewMockpasswordHasherService(ctrl *gomock.Controller) *MockpasswordHasherService {
	mock := &MockpasswordHasherService{ctrl: ctrl}
	mock.recorder = &MockpasswordHasherServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpasswordHasherService) EXPECT() *MockpasswordHasherServiceMockRecorder {
	return m.recorder
}

// CompareHashAndPassword mocks base method.
func (m *MockpasswordHasherService) CompareHashAndPassword(passwordHash, password string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareHashAndPassword", passwordHash, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CompareHashAndPassword indicates an expected call of CompareHashAndPassword.
func (mr *MockpasswordHasherServiceMockRecorder) CompareHashAndPassword(passwordHash, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareHashAndPassword", reflect.TypeOf((*MockpasswordHasherService)(nil).CompareHashAndPassword), passwordHash, password)
}

// GenerateHashPassword mocks base method.
func (m *MockpasswordHasherService) GenerateHashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateHashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateHashPassword indicates an expected call of GenerateHashPassword.
func (mr *MockpasswordHasherServiceMockRecorder) GenerateHashPassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateHashPassword", reflect.TypeOf((*MockpasswordHasherService)(nil).GenerateHashPassword), password)
}

// MockjwtProviderService is a mock of jwtProviderService interface.
type MockjwtProviderService struct {
	ctrl     *gomock.Controller
	recorder *MockjwtProviderServiceMockRecorder
	isgomock struct{}
}

// MockjwtProviderServiceMockRecorder is the mock recorder for MockjwtProviderService.
type MockjwtProviderServiceMockRecorder struct {
	mock *MockjwtProviderService
}

// NewMockjwtProviderService creates a new mock instance.
func NewMockjwtProviderService(ctrl *gomock.Controller) *MockjwtProviderService {
	mock := &MockjwtProviderService{ctrl: ctrl}
	mock.recorder = &MockjwtProviderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockjwtProviderService) EXPECT() *MockjwtProviderServiceMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockjwtProviderService) GenerateToken(userId int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockjwtProviderServiceMockRecorder) GenerateToken(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockjwtProviderService)(nil).GenerateToken), userId)
}

// ParseToken mocks base method.
func (m *MockjwtProviderService) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockjwtProviderServiceMockRecorder) ParseToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockjwtProviderService)(nil).ParseToken), token)
}
